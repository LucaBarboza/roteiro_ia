import streamlit as st

!pip -q install --upgrade google-adk
!pip install litellm -q

import os
import asyncio
import textwrap
from datetime import datetime 
from IPython.display import display, Markdown

import google.genai as genai
from google.colab import userdata
from google.adk.agents import Agent
from google.adk.sessions import InMemorySessionService
from google.adk.runners import Runner
from google.genai import types as genai_types
from google.adk.tools import google_search

os.environ['GOOGLE_API_KEY'] = GOOGLE_API_KEY
os.environ["GOOGLE_GENAI_USE_VERTEXAI"] = "False"
genai.Client()

async def call_agent_final_response(
    agent_under_test: Agent,
    message_text: str,
    runner_obj: Runner,
    user_id_val: str,
    session_id_val: str
) -> str:
    content = genai_types.Content(role='user', parts=[genai_types.Part(text=message_text)])
    final_response_text = f"O Agente ({agent_under_test.name}) n√£o produziu uma resposta final."
    full_response_parts = []

    async for event in runner_obj.run_async(user_id=user_id_val, session_id=session_id_val, new_message=content):
        if event.is_final_response():
            if event.content and event.content.parts:
                full_response_parts.extend(part.text for part in event.content.parts if part.text)
            elif event.actions and event.actions.escalate:
                full_response_parts.append(f"Agente escalonado: {event.error_message or 'Nenhuma mensagem espec√≠fica.'}")

            if full_response_parts:
                final_response_text = "\\n".join(full_response_parts)
            break
    return final_response_text

async def executar_passo_agente(
    agent_config: dict,
    prompt: str,
    session_service: InMemorySessionService,
    app_name: str,
    user_id: str,
    session_id: str
) -> str:

    agent = Agent(**agent_config)
    runner = Runner(agent=agent, app_name=app_name, session_service=session_service)
    response = await call_agent_final_response(agent, prompt, runner, user_id, session_id)
    return response

GEMINI_MODEL = "gemini-2.0-flash"

AGENT_IDEALIZADOR_CONFIG = {
    "name": "agente_idealizador",
    "model": GEMINI_MODEL,
    "description": "Agente que sugere pontos tur√≠sticos e cidades relevantes em um pa√≠s.",
    "tools": [google_search],
    "instruction": """
    Voc√™ √© um "Curador de Destinos", um agente de viagens de elite especializado em criar roteiros aut√™nticos e memor√°veis.
    Seu diferencial √© ir al√©m do √≥bvio, identificando n√£o s√≥ os locais mais populares,
    mas tamb√©m aqueles com as melhores avalia√ß√µes que oferecem uma experi√™ncia genu√≠na.

    Sua miss√£o √© montar um panorama inspirador sobre os tesouros de um pa√≠s para um viajante curioso.

    Para o pa√≠s {pais}, siga estritamente os seguintes passos:
    1.  **Pesquisa Inicial:** Identifique um conjunto de 8 a 10 cidades com forte apelo tur√≠stico no pa√≠s.
    2.  **An√°lise Quantitativa e Qualitativa:** Para cada cidade da lista inicial,
    use a busca para analisar a quantidade e, mais importante, a qualidade de suas atra√ß√µes.
    3.  **Sele√ß√£o e Curadoria:** Com base na an√°lise, selecione as **TOP 5 cidades** definitivas.
    Sua escolha deve balancear cidades com 'destaques imperd√≠veis' (reconhecimento mundial)
    e cidades que representam 'joias culturais' (experi√™ncias aut√™nticas e muito bem avaliadas).
    4.  **Montagem do Roteiro:** Para cada cidade escolhida, identifique as atra√ß√µes principais,
    incluindo uma breve justificativa.


    Apresente sua curadoria no formato abaixo, usando Markdown. Comece com um par√°grafo introdut√≥rio no tom da persona.

    ---

    ## **[Nome da Cidade 1]**

    **Por que visitar:** [Escreva aqui um par√°grafo curto e envolvente justificando por que esta cidade foi escolhida,
    com base na sua an√°lise. Ex: 'Capital cultural vibrante, famosa por sua arquitetura hist√≥rica e gastronomia de rua que encanta a todos.']

    * **[Nome do Ponto Tur√≠stico 1]:** Uma breve descri√ß√£o focada na experi√™ncia do visitante.
    * **[Nome do Ponto Tur√≠stico 2]:** Uma breve descri√ß√£o focada na experi√™ncia do visitante.
    * **[Nome do Ponto Tur√≠stico 3]:** Uma breve descri√ß√£o focada na experi√™ncia do visitante.

    ## **[Nome da Cidade 2]**
    **Por que visitar:** [Par√°grafo justificando a escolha...]
    * ... e assim por diante para todas as 5 cidades."""
}

AGENT_PLANEJADOR_CONFIG = {
    "name": "agente_planejador",
    "model": GEMINI_MODEL,
    "description": "Agente que planeja roteiros de viagem detalhados.",
    "tools": [google_search],
    "instruction": """
    Voc√™ √© um "Arquiteto de Viagens",
    um especialista de elite que projeta experi√™ncias de viagem completas e imersivas.
    Sua expertise combina otimiza√ß√£o log√≠stica com curadoria cultural e
    dicas pr√°ticas que transformam uma boa viagem em uma viagem inesquec√≠vel.

    Projetar um roteiro de viagem totalmente personalizado e otimizado, e a log√≠stica real de deslocamento.

    - **Pa√≠s/Regi√£o de Destino:** {pais}
    - **Dura√ß√£o Total (dias):** {dias}
    - **Cidades e Atra√ß√µes Desejadas:** {ideias_buscadas}

    1.  **An√°lise do Perfil:** Comece interpretando o perfil e o ritmo do viajante para guiar todas as suas escolhas.
    2.  **Mapeamento Log√≠stico:** Use a busca para determinar a ordem mais
    eficiente para visitar as cidades listadas, minimizando o tempo e o
    custo de viagem entre elas (considere voos, trens e carros).
    3.  **Aloca√ß√£o de Dias:** Distribua o n√∫mero total de dias entre as cidades selecionadas,
    com base na quantidade de atra√ß√µes.
    4.  **Constru√ß√£o Di√°ria Imersiva:** Para cada dia, crie um roteiro que agrupe as atra√ß√µes por bairro ou regi√£o.
    V√° al√©m da lista: inclua hor√°rios sugeridos, dicas pr√°ticas e sugest√µes de experi√™ncias locais.
    5.  **Enriquecimento:** Adicione uma se√ß√£o final com dicas gerais valiosas para o destino.

    Gere a resposta em Markdown, seguindo rigorosamente esta estrutura:

    ### **Seu Roteiro Personalizado para [Pa√≠s]**

    ### **Vis√£o Geral e Log√≠stica**
    - **Ordem das Cidades:** [Cidade A] -> [Cidade B] -> [Cidade C]
    - **Sugest√£o de Transporte Principal:** [Ex: Trem de alta velocidade entre cidades, aluguel de carro para a regi√£o X]

    ## **Roteiro Detalhado**
    ### **Dia [1]: Chegada em [Cidade A] e Primeira Explora√ß√£o**
    - **Foco do Dia:** Aclimata√ß√£o e imers√£o no bairro [Nome do Bairro].
    - **Manh√£ (09:00 - 12:00):** [Atividade 1]. **Dica do Arquiteto:** "Compre ingressos online com anteced√™ncia para evitar filas de 1-2 horas."
    - **Almo√ßo (12:30):** **Sugest√£o:** [Tipo de culin√°ria local ou restaurante espec√≠fico]. "Experimente o prato [Nome do Prato], um cl√°ssico da regi√£o."
    - **Tarde (14:00 - 17:00):** [Atividade 2]. **Dica do Arquiteto:** "A melhor luz para fotos neste local √© por volta das 16:00."
    - **Noite (19:00+):** [Sugest√£o de jantar ou atividade noturna, alinhada ao perfil do viajante].

    *(Repita essa estrutura detalhada para todos os dias da viagem)*
    ---
    ### **Dicas Essenciais para sua Viagem**
    - **Dinheiro e Pagamentos:** [Dica sobre moeda local, uso de cart√µes]
    - Algo que achar relevantes (se tiver)
    """
}

AGENT_REVISOR_CONFIG = {
    "name": "agente_revisor",
    "model": GEMINI_MODEL,
    "description": "Agente revisor e refinador do roteiro de viagem.",
    "tools": [google_search],
    "instruction": """
    Voc√™ √© um "Auditor de Experi√™ncias de Viagem.
    Sua fun√ß√£o √© analisar criticamente um roteiro n√£o apenas pela log√≠stica,
    mas pela qualidade, ritmo e viabilidade da experi√™ncia geral.
    Voc√™ √© anal√≠tico, preciso e sua auditoria transforma planos amadores em experi√™ncias memor√°veis e sem estresse,
    usando dados e buscas para embasar cada recomenda√ß√£o.

    Realizar uma auditoria completa de um rascunho de roteiro,
    fornecendo uma vers√£o final otimizada e validada.

    **Roteiro Rascunho para Auditoria:** {plano_de_roteiro}

    1.  **Teste de Estresse Log√≠stico:** Use a busca para validar cada dia.
    Pesquise especificamente:
    * **Tempos de Deslocamento Reais:** Simule os trajetos (ex: "tempo de metr√¥ do Louvre √† Torre Eiffel") para validar a viabilidade do cronograma.
    * **Tempo de Visita:** Pesquise o tempo m√©dio recomendado para visitar cada local.
    2.  **Reconstru√ß√£o Otimizada:** Crie a vers√£o final auditada do roteiro.
    # FORMATO DO ROTEIRO AUDITADO E OTIMIZADO: Gere a resposta em Markdown, seguindo rigorosamente esta estrutura profissional: --- ###
    ** [Apresente aqui a vers√£o final e corrigida do roteiro,
    no formato dia a dia claro e detalhado, j√° com todas as melhorias incorporadas. ---
    
    Retorne apenas o roteiro novo e as dicas, sem as observa√ß√µes do antigo"""
}

st.title("üìù Crie Seus Roteiros")

pais = st.input("‚ùì Por favor, digite o PA√çS que voc√™ quer visitar: ")
data_inicio_str = st.input("‚ùì Diga o dia que pretende iniciar sua viagem (DD/MM/AAAA): ")
data_fim_str = st.input("‚ùì Diga o dia que pretende finalizar sua viagem (DD/MM/AAAA): ")

data_inicio = datetime.strptime(data_inicio_str, "%d/%m/%Y").date()
data_fim = datetime.strptime(data_fim_str, "%d/%m/%Y").date()
dias = (data_fim - data_inicio).days

st.write(f"\\nCome√ßando a cria√ß√£o do roteiro para {pais} ({dias} dias)...")

session_service = InMemorySessionService()
APP_NAME = "roteiro_viagem_app"
USER_ID = "user_traveler_01"
SESSION_ID = f"session_{datetime.now().strftime('%Y%m%d%H%M%S')}"
session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID)

try:
  current_session = await session_service.create_session(
      app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID)
except TypeError:
  current_session = session_service.create_session(
      app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID)


agent_idealizador_config_dinamico = AGENT_IDEALIZADOR_CONFIG.copy()
agent_idealizador_config_dinamico['instruction'] = agent_idealizador_config_dinamico['instruction'].format(pais=pais)

prompt_idealizador = f"Pa√≠s: {pais}"
ideias_buscadas = await executar_passo_agente(agent_idealizador_config_dinamico, prompt_idealizador, session_service, APP_NAME, USER_ID, SESSION_ID)

agent_planejador_config_dinamico = AGENT_PLANEJADOR_CONFIG.copy()
agent_planejador_config_dinamico['instruction'] = agent_planejador_config_dinamico['instruction'].format(pais=pais,
                                                                                                         dias=str(dias),
                                                                                                         ideias_buscadas=ideias_buscadas)
plano_de_roteiro = await executar_passo_agente(agent_planejador_config_dinamico, "Gerar roteiro com base nas instru√ß√µes.", session_service, APP_NAME, USER_ID, SESSION_ID)

agent_revisor_config_dinamico = AGENT_REVISOR_CONFIG.copy()
agent_revisor_config_dinamico['instruction'] = agent_revisor_config_dinamico['instruction'].format(plano_de_roteiro=plano_de_roteiro)
roteiro_revisado = await executar_passo_agente(agent_revisor_config_dinamico, "Revisar roteiro com base nas instru√ß√µes.", session_service, APP_NAME, USER_ID, SESSION_ID)

st.write("\\n--- üìù Roteiro Pronto ---")
st.write(roteiro_revisado)